#!/bin/bash

# ü§ñ Epicentra Bot - Tek Komutla Proje Y√∂neticisi
# Geli≈ütirici: Cascade AI
# Versiyon: 1.0.0
# A√ßƒ±klama: Epicentra projesini tek komutla ba≈ülatƒ±r, durdurur ve y√∂netir

# Renkli √ßƒ±ktƒ± i√ßin
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Bot logosu
show_logo() {
    echo -e "${CYAN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    ü§ñ EPICENTRA BOT ü§ñ                      ‚ïë"
    echo "‚ïë                                                              ‚ïë"
    echo "‚ïë           Tek Komutla Proje Y√∂netim Asistanƒ±                ‚ïë"
    echo "‚ïë                     v1.0.0                                   ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# Yardƒ±m men√ºs√º
show_help() {
    echo -e "${WHITE}ü§ñ Epicentra Bot Kullanƒ±m Kƒ±lavuzu:${NC}"
    echo ""
    echo -e "${GREEN}Temel Komutlar:${NC}"
    echo -e "  ${BLUE}./epicentra-bot.sh start${NC}     - Projeyi ba≈ülat"
    echo -e "  ${BLUE}./epicentra-bot.sh stop${NC}      - Projeyi durdur"
    echo -e "  ${BLUE}./epicentra-bot.sh restart${NC}   - Projeyi yeniden ba≈ülat"
    echo -e "  ${BLUE}./epicentra-bot.sh status${NC}    - Proje durumunu g√∂ster"
    echo ""
    echo -e "${GREEN}Geli≈ütirme Komutlarƒ±:${NC}"
    echo -e "  ${BLUE}./epicentra-bot.sh dev${NC}       - Geli≈ütirme modunda ba≈ülat"
    echo -e "  ${BLUE}./epicentra-bot.sh build${NC}     - Projeyi build et"
    echo -e "  ${BLUE}./epicentra-bot.sh logs${NC}      - Loglarƒ± g√∂ster"
    echo ""
    echo -e "${GREEN}Bakƒ±m Komutlarƒ±:${NC}"
    echo -e "  ${BLUE}./epicentra-bot.sh install${NC}   - Dependencies y√ºkle"
    echo -e "  ${BLUE}./epicentra-bot.sh clean${NC}     - Cache temizle"
    echo -e "  ${BLUE}./epicentra-bot.sh update${NC}    - Projeyi g√ºncelle"
    echo ""
    echo -e "${GREEN}Yardƒ±m:${NC}"
    echo -e "  ${BLUE}./epicentra-bot.sh help${NC}      - Bu yardƒ±m men√ºs√ºn√º g√∂ster"
    echo ""
}

# Sistem gereksinimlerini kontrol et
check_requirements() {
    echo -e "${BLUE}üîç Sistem gereksinimleri kontrol ediliyor...${NC}"
    
    local missing_deps=()
    
    # Node.js kontrol√º
    if ! command -v node &> /dev/null; then
        missing_deps+=("Node.js")
    else
        echo -e "${GREEN}‚úÖ Node.js: $(node --version)${NC}"
    fi
    
    # NPM kontrol√º
    if ! command -v npm &> /dev/null; then
        missing_deps+=("NPM")
    else
        echo -e "${GREEN}‚úÖ NPM: $(npm --version)${NC}"
    fi
    
    # PM2 kontrol√º
    if ! command -v pm2 &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  PM2 bulunamadƒ±, y√ºkleniyor...${NC}"
        npm install -g pm2
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úÖ PM2 ba≈üarƒ±yla y√ºklendi!${NC}"
        else
            missing_deps+=("PM2")
        fi
    else
        echo -e "${GREEN}‚úÖ PM2: $(pm2 --version)${NC}"
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        echo -e "${RED}‚ùå Eksik baƒüƒ±mlƒ±lƒ±klar: ${missing_deps[*]}${NC}"
        echo -e "${YELLOW}L√ºtfen eksik baƒüƒ±mlƒ±lƒ±klarƒ± y√ºkleyin ve tekrar deneyin.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ T√ºm sistem gereksinimleri kar≈üƒ±lanƒ±yor!${NC}"
}

# Dependencies y√ºkle
install_dependencies() {
    echo -e "${BLUE}üì¶ Dependencies y√ºkleniyor...${NC}"
    
    # Ana proje dependencies
    if [ ! -d "node_modules" ]; then
        echo -e "${YELLOW}Ana proje dependencies y√ºkleniyor...${NC}"
        npm install
        if [ $? -ne 0 ]; then
            echo -e "${RED}‚ùå Ana proje dependencies y√ºklenemedi!${NC}"
            exit 1
        fi
    fi
    
    # Monitoring dependencies
    if [ -d "monitoring" ] && [ ! -d "monitoring/node_modules" ]; then
        echo -e "${YELLOW}Monitoring dependencies y√ºkleniyor...${NC}"
        cd monitoring
        npm install
        cd ..
        if [ $? -ne 0 ]; then
            echo -e "${RED}‚ùå Monitoring dependencies y√ºklenemedi!${NC}"
            exit 1
        fi
    fi
    
    echo -e "${GREEN}‚úÖ T√ºm dependencies y√ºklendi!${NC}"
}

# Projeyi build et
build_project() {
    echo -e "${BLUE}üî® Proje build ediliyor...${NC}"
    
    npm run build
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Build i≈ülemi ba≈üarƒ±sƒ±z!${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Build tamamlandƒ±!${NC}"
}

# Projeyi ba≈ülat
start_project() {
    echo -e "${BLUE}üöÄ Epicentra ba≈ülatƒ±lƒ±yor...${NC}"
    
    # Gereksinimler kontrol et
    check_requirements
    
    # Dependencies kontrol et
    install_dependencies
    
    # Build kontrol et
    if [ ! -d ".output" ]; then
        build_project
    fi
    
    # Mevcut PM2 s√ºre√ßlerini temizle
    pm2 delete all 2>/dev/null || true
    
    # Ana sunucuyu ba≈ülat
    if [ -f "ecosystem.config.js" ]; then
        pm2 start ecosystem.config.js
    else
        pm2 start npm --name "epicentra-main" -- start
    fi
    
    # Monitoring dashboard'unu ba≈ülat (varsa)
    if [ -f "monitoring/pm2-web.js" ]; then
        cd monitoring
        pm2 start pm2-web.js --name "monitoring-dashboard"
        cd ..
    fi
    
    # PM2 s√ºre√ßlerini kaydet
    pm2 save
    
    echo -e "${GREEN}üéâ Epicentra ba≈üarƒ±yla ba≈ülatƒ±ldƒ±!${NC}"
    show_urls
}

# Geli≈ütirme modunda ba≈ülat
start_dev() {
    echo -e "${BLUE}üõ†Ô∏è  Geli≈ütirme modunda ba≈ülatƒ±lƒ±yor...${NC}"
    
    check_requirements
    install_dependencies
    
    echo -e "${CYAN}Geli≈ütirme sunucusu ba≈ülatƒ±lƒ±yor...${NC}"
    npm run dev
}

# Projeyi durdur
stop_project() {
    echo -e "${BLUE}üõë Epicentra durduruluyor...${NC}"
    
    pm2 stop all
    pm2 delete all
    
    echo -e "${GREEN}‚úÖ Epicentra durduruldu!${NC}"
}

# Projeyi yeniden ba≈ülat
restart_project() {
    echo -e "${BLUE}üîÑ Epicentra yeniden ba≈ülatƒ±lƒ±yor...${NC}"
    
    stop_project
    sleep 2
    start_project
}

# Proje durumunu g√∂ster
show_status() {
    echo -e "${BLUE}üìä Proje Durumu:${NC}"
    echo ""
    
    if command -v pm2 &> /dev/null; then
        pm2 status
        echo ""
        show_urls
    else
        echo -e "${RED}‚ùå PM2 bulunamadƒ±!${NC}"
    fi
}

# URL'leri g√∂ster
show_urls() {
    echo -e "${PURPLE}üåê Eri≈üim URL'leri:${NC}"
    echo -e "${CYAN}üì± Ana Uygulama:${NC} http://localhost:3000"
    echo -e "${CYAN}üîß API:${NC} http://localhost:3000/api"
    
    # PM2 Web Dashboard varsa
    if pm2 list | grep -q "monitoring-dashboard"; then
        echo -e "${CYAN}üìä Monitoring Dashboard:${NC} http://localhost:9615"
    fi
    
    echo ""
    echo -e "${YELLOW}üí° ƒ∞pucu: Loglarƒ± g√∂rmek i√ßin '${BLUE}./epicentra-bot.sh logs${NC}${YELLOW}' komutunu kullanƒ±n${NC}"
}

# Loglarƒ± g√∂ster
show_logs() {
    echo -e "${BLUE}üìã Epicentra Loglarƒ±:${NC}"
    
    if command -v pm2 &> /dev/null; then
        pm2 logs --lines 50
    else
        echo -e "${RED}‚ùå PM2 bulunamadƒ±!${NC}"
    fi
}

# Cache temizle
clean_cache() {
    echo -e "${BLUE}üßπ Cache temizleniyor...${NC}"
    
    # Nuxt cache
    rm -rf .nuxt
    rm -rf .output
    
    # Node modules (isteƒüe baƒülƒ±)
    read -p "Node modules'larƒ± da temizlemek istiyor musunuz? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf node_modules
        rm -rf monitoring/node_modules 2>/dev/null || true
        echo -e "${GREEN}‚úÖ Node modules temizlendi!${NC}"
    fi
    
    # PM2 logs
    pm2 flush 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ Cache temizlendi!${NC}"
}

# Projeyi g√ºncelle
update_project() {
    echo -e "${BLUE}üîÑ Proje g√ºncelleniyor...${NC}"
    
    # Git pull (eƒüer git repo ise)
    if [ -d ".git" ]; then
        echo -e "${YELLOW}Git g√ºncellemesi yapƒ±lƒ±yor...${NC}"
        git pull
    fi
    
    # Dependencies g√ºncelle
    echo -e "${YELLOW}Dependencies g√ºncelleniyor...${NC}"
    npm update
    
    # Monitoring dependencies g√ºncelle
    if [ -d "monitoring" ]; then
        cd monitoring
        npm update
        cd ..
    fi
    
    # Yeniden build et
    build_project
    
    echo -e "${GREEN}‚úÖ Proje g√ºncellendi!${NC}"
}

# Ana fonksiyon
main() {
    # Proje dizinine git
    cd "$(dirname "$0")"
    
    # Logo g√∂ster
    show_logo
    
    # Komut kontrol√º
    case "${1:-help}" in
        "start")
            start_project
            ;;
        "stop")
            stop_project
            ;;
        "restart")
            restart_project
            ;;
        "status")
            show_status
            ;;
        "dev")
            start_dev
            ;;
        "build")
            build_project
            ;;
        "logs")
            show_logs
            ;;
        "install")
            check_requirements
            install_dependencies
            ;;
        "clean")
            clean_cache
            ;;
        "update")
            update_project
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Bilinmeyen komut: $1${NC}"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Scripti √ßalƒ±≈ütƒ±r
main "$@"
